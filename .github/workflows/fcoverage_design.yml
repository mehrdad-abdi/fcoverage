name: 'fCoverage - Feature Design'

on:
  workflow_dispatch:
    inputs:
      target_repository:
        description: 'Repository name for the project-under-test with owner. For example, actions/checkout'
        required: true
        default: 'ytdl-org/youtube-dl'
      feature_name:
        description: 'The name of the feature to be analyzed.'
        required: true
      src_path:
        description: 'src folder within the repository'
        default: 'youtube-dl'
      test_path:
        description: 'tests folder within the repository'
        default: 'test'
      llm_model:
        description: 'LLM model name and provider'
        type: choice
        options:
          - "google_genai:gemini-2.0-flash"
          - "google_genai:gemini-2.5-pro"
      embeddings_model:
        description: 'Embeddings model name and provider'
        type: choice
        options:
          - "openai:text-embedding-3-large"
          - "google_genai:gemini-embedding-001"
      vectorstore_download:
        description: 'The run id for a previous workflow run that has generated a vectorstore artifact.'
        required: true
        type: int
        default: 0
      features_download:
        description: 'The run id for a previous workflow run that has generated a feature list artifact.'
        required: true
        type: int
        default: 0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out ${{ github.event.inputs.target_repository }}"
        uses: actions/checkout@v4
        with:
          repository:  ${{ github.event.inputs.target_repository }}
          path: ${{github.workspace}}/target_repository
      - name: Split Owner and Repo Name
        id: repo_info # Give this step an ID to access its outputs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          FULL_REPO="${{ github.event.inputs.target_repository }}"
          IFS='/' read -r OWNER REPO_NAME <<< "$FULL_REPO"

          echo "Owner: $OWNER"
          echo "Repo Name: $REPO_NAME"

          REPO_DESCRIPTION=$(gh repo view "${{ github.event.inputs.target_repository }}" --json description -q .description)

          # Set outputs for subsequent steps
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "description=${REPO_DESCRIPTION}" >> $GITHUB_OUTPUT
      - name: Split LLM Model Name
        id: model_info
        run: |
          IFS=':' read -r MODEL_PROVIDER MODEL_NAME <<< "${{ github.event.inputs.llm_model }}"
          IFS=':' read -r EMB_MODEL_PROVIDER EMB_MODEL_NAME <<< "${{ github.event.inputs.embeddings_model }}"

          echo "LLM Model Provider: $MODEL_PROVIDER"
          echo "LLM Model Name: $MODEL_NAME"
          echo "Embeddings Model Provider: $EMB_MODEL_PROVIDER"
          echo "Embeddings Model Name: $EMB_MODEL_NAME"

          # Set outputs for subsequent steps
          echo "llm_model=$MODEL_NAME" >> $GITHUB_OUTPUT
          echo "llm_provider=$MODEL_PROVIDER" >> $GITHUB_OUTPUT
          echo "embeddings_model=$EMB_MODEL_NAME" >> $GITHUB_OUTPUT
          echo "embeddings_provider=$EMB_MODEL_PROVIDER" >> $GITHUB_OUTPUT
      - name: Extract feature name
        env:
          FEATURE_NAME: ${{ github.event.inputs.feature_name }}
        id: feature
        run: |
          echo "name=$FEATURE_NAME" >> $GITHUB_OUTPUT
          echo "feature_filename=${{ github.workspace }}/target_repository/fcoverage/features-definition-${FEATURE_NAME// /_}.json" >> $GITHUB_OUTPUT
          echo "design_filename=${{ github.workspace }}/target_repository/fcoverage/${FEATURE_NAME// /_}/design.md" >> $GITHUB_OUTPUT
          echo "testcases_filename=${{ github.workspace }}/target_repository/fcoverage/${FEATURE_NAME// /_}/test_cases.md" >> $GITHUB_OUTPUT
      - name: 'Revert vectorstore'
        if: ${{ github.event.inputs.vectorstore_download != 0 }}
        uses: actions/download-artifact@v4
        with:
          name: "vectorstore"
          run-id: ${{ github.event.inputs.vectorstore_download }}
          github-token: ${{ github.token }}
          path: ${{ github.workspace }}/target_repository/vector-db
      - name: 'Revert features'
        if: ${{ github.event.inputs.features_download != 0 }}
        uses: actions/download-artifact@v4
        with:
          name: "features_list"
          run-id: ${{ github.event.inputs.features_download }}
          github-token: ${{ github.token }}
          path: ${{ github.workspace }}/target_repository/fcoverage
      - name: "Make sure the file name is correct"
        env:
          FEATURE_NAME: ${{ github.event.inputs.feature_name }}
        run: |
          cat "${{ github.workspace }}/target_repository/fcoverage/features-definition-${FEATURE_NAME// /_}.json"
      - name: 'Check out fcoverage'
        uses: actions/checkout@v4
        with:
          repository: 'mehrdad-abdi/fcoverage'
          path: ${{ github.workspace }}/fcoverage
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'poetry.lock', 'pdm.lock', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-      
      - name: 'Install fcoverage'
        working-directory: ${{ github.workspace }}/fcoverage
        run: |
          echo "Installing fcoverage"
          ls
          python -m pip install --upgrade pip
          pip install -e .
      - name: 'Run fcoverage'
        working-directory: ${{ github.workspace }}/target_repository
        env:
          LANGCHAIN_TRACING: true
          LANGCHAIN_ENDPOINT: https://api.smith.langchain.com
          LANGCHAIN_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FEATURE_NAME: ${{ github.event.inputs.feature_name }}
        run: |
          ls
          fcoverage \
            --project-name "${{ steps.repo_info.outputs.repo_name }}" \
            --project-description "${{ steps.repo_info.outputs.description }}" \
            --project . \
            --task design \
            --out fcoverage \
            --vector-db-persist vector-db \
            --src-path ${{ github.event.inputs.src_path }} \
            --test-path ${{ github.event.inputs.test_path }} \
            --llm-model ${{ steps.model_info.outputs.llm_model }} \
            --llm-provider ${{ steps.model_info.outputs.llm_provider }} \
            --embedding-model ${{ steps.model_info.outputs.embeddings_model }} \
            --embedding-provider ${{ steps.model_info.outputs.embeddings_provider }} \
            --feature-definition "${{ steps.feature.outputs.feature_filename }}"
      - name: 'Build artifacts feature design'
        uses: actions/upload-artifact@v4
        with:
          name: feature_design
          path: ${{ steps.feature.outputs.design_filename }}
      - name: 'Build artifacts test cases'
        uses: actions/upload-artifact@v4
        with:
          name: feature_test_cases
          path: ${{ steps.feature.outputs.testcases_filename }}
      - name: 'Build artifacts vectorstore'
        uses: actions/upload-artifact@v4
        if: always() 
        with:
          name: vectorstore
          path: ${{ github.workspace }}/target_repository/vector-db
      - name: Add Report to Job Summary
        run: |
          echo "# Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.feature.outputs.design_filename }} >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "# Test cases" >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.feature.outputs.testcases_filename }} >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Run completed at:** $(date)" >> $GITHUB_STEP_SUMMARY

